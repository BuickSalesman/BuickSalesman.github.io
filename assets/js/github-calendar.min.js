"use strict";

var _typeof2 =
  "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
    ? function (e) {
        return typeof e;
      }
    : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype
          ? "symbol"
          : typeof e;
      };

!(function (e) {
  "object" === ("undefined" == typeof exports ? "undefined" : _typeof2(exports)) && "undefined" != typeof module
    ? (module.exports = e())
    : "function" == typeof define && define.amd
    ? define([], e)
    : (("undefined" != typeof window
        ? window
        : "undefined" != typeof global
        ? global
        : "undefined" != typeof self
        ? self
        : this
      ).GitHubCalendar = e());
})(function () {
  return (function n(a, o, u) {
    function s(t, e) {
      if (!o[t]) {
        if (!a[t]) {
          var r = "function" == typeof require && require;
          if (!e && r) return r(t, !0);
          if (i) return i(t, !0);
          throw (((e = new Error("Cannot find module '" + t + "'")).code = "MODULE_NOT_FOUND"), e);
        }
        (r = o[t] = { exports: {} }),
          a[t][0].call(
            r.exports,
            function (e) {
              return s(a[t][1][e] || e);
            },
            r,
            r.exports,
            n,
            a,
            o,
            u
          );
      }
      return o[t].exports;
    }
    for (var i = "function" == typeof require && require, e = 0; e < u.length; e++) s(u[e]);
    return s;
  })(
    {
      1: [
        function (require, module, exports) {
          var p = require("elly"),
            g = require("add-subtract-date"),
            m = require("formatoid"),
            // Removed: github-calendar-parser (b = require("github-calendar-parser"))
            h = "MMM D, YYYY",
            y = "MMMM D",
            _ = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

          function v(e) {
            return e + " " + (1 === e ? "day" : "days");
          }

          module.exports = function (d, username, f) {
            d = p(d);
            f = f || {};

            // Remove summary_text (unused now):
            // f.summary_text = f.summary_text ||
            //   'Summary of pull requests, issues opened, and commits made by <a href="https://github.com/' +
            //   username +
            //   '" target="blank">@' +
            //   username +
            //   "</a>";

            // Remove the minHeight line (for global_stats):
            // !1 === f.global_stats && (d.style.minHeight = "175px");

            var storageKeys = {
              content: "gh_calendar_content." + username,
              expire_at: "gh_calendar_expire." + username,
            };

            f.cache = 1000 * (f.cache || 86400);

            f.proxy =
              f.proxy ||
              function (user) {
                return fetch("https://api.bloggify.net/gh-calendar/?username=" + user).then(function (res) {
                  return res.text();
                });
              };

            f.getCalendar =
              f.getCalendar ||
              function (user) {
                if (f.cache && Date.now() < +localStorage.getItem(storageKeys.expire_at)) {
                  var cached = localStorage.getItem(storageKeys.content);
                  if (cached) return Promise.resolve(cached);
                }
                return f.proxy(user).then(function (data) {
                  if (f.cache) {
                    localStorage.setItem(storageKeys.content, data);
                    localStorage.setItem(storageKeys.expire_at, Date.now() + f.cache);
                  }
                  return data;
                });
              };

            function loadCalendar() {
              return f
                .getCalendar(username)
                .then(function (res) {
                  var container = document.createElement("div");
                  container.innerHTML = res;

                  var yearly = container.querySelector(".js-yearly-contributions");
                  if (!yearly) return; // Something failed, or the structure changed

                  // Remove the large <h2> “X’s contributions” heading
                  p(".position-relative h2", yearly).remove();

                  // Attempt to remove the 3D/VR link
                  var allLinks = container.querySelectorAll("a");
                  for (var linkEl of allLinks) {
                    if (linkEl.textContent.includes("View your contributions in 3D, VR and IRL!")) {
                      linkEl.parentElement.remove();
                    }
                  }

                  // If there's an <include-fragment>, it's still loading
                  if (yearly.querySelector("include-fragment")) {
                    setTimeout(loadCalendar, 500);
                    return;
                  }

                  // Responsive option
                  if (f.responsive === true) {
                    var svgTable = yearly.querySelector("table.js-calendar-graph-table");
                    var originalWidth = svgTable.getAttribute("width");
                    var originalHeight = svgTable.getAttribute("height");
                    svgTable.removeAttribute("height");
                    svgTable.setAttribute("width", "100%");
                    svgTable.setAttribute("viewBox", "0 0 " + originalWidth + " " + originalHeight);
                  }

                  // [REMOVED STATS BLOCK]
                  // We skip adding total contributions, streaks, etc.

                  // Replace the container’s HTML
                  d.innerHTML = yearly.innerHTML;

                  // Tooltips
                  if (f.tooltips === true) {
                    var parentEl = d;
                    var tooltipEl = document.createElement("div");
                    tooltipEl.classList.add("day-tooltip");
                    parentEl.appendChild(tooltipEl);

                    parentEl
                      .querySelectorAll(".js-calendar-graph-svg rect.ContributionCalendar-day")
                      .forEach(function (dayRect) {
                        dayRect.addEventListener("mouseenter", function (ev) {
                          var count = ev.target.getAttribute("data-count");
                          if (count === "0") count = "No contributions";
                          else if (count === "1") count = "1 contribution";
                          else count += " contributions";

                          var rawDate = ev.target.getAttribute("data-date");
                          var dt = new Date(rawDate);

                          var dateStr = _[dt.getUTCMonth()] + " " + dt.getUTCDate() + ", " + dt.getUTCFullYear();

                          tooltipEl.innerHTML = "<strong>" + count + "</strong> on " + dateStr;
                          tooltipEl.classList.add("is-visible");

                          var bounds = ev.target.getBoundingClientRect();
                          var leftPos = bounds.left + window.pageXOffset - tooltipEl.offsetWidth / 2 + bounds.width / 2;
                          var topPos = bounds.bottom + window.pageYOffset - tooltipEl.offsetHeight - 2 * bounds.height;

                          tooltipEl.style.top = topPos + "px";
                          tooltipEl.style.left = leftPos + "px";
                        });

                        dayRect.addEventListener("mouseleave", function () {
                          tooltipEl.classList.remove("is-visible");
                        });
                      });
                  }
                })
                .catch(function (err) {
                  console.error(err);
                });
            }

            return loadCalendar();
          };
        },
        {
          "add-subtract-date": 2,
          elly: 4,
          formatoid: 6,
          // "github-calendar-parser": 8,  (removed)
        },
      ],
      2: [
        function (require, module, exports) {
          function create(op) {
            return function dateOp(date, amount, range) {
              amount *= op;
              switch (range) {
                case "years":
                case "year":
                  date.setFullYear(date.getFullYear() + amount);
                  break;
                case "months":
                case "month":
                  date.setMonth(date.getMonth() + amount);
                  break;
                case "weeks":
                case "week":
                  return dateOp(date, 7 * amount, "days");
                case "days":
                case "day":
                  date.setDate(date.getDate() + amount);
                  break;
                case "hours":
                case "hour":
                  date.setHours(date.getHours() + amount);
                  break;
                case "minutes":
                case "minute":
                  date.setMinutes(date.getMinutes() + amount);
                  break;
                case "seconds":
                case "second":
                  date.setSeconds(date.getSeconds() + amount);
                  break;
                case "milliseconds":
                case "millisecond":
                  date.setMilliseconds(date.getMilliseconds() + amount);
                  break;
                default:
                  throw new Error("Invalid range: " + range);
              }
              return date;
            };
          }

          module.exports = {
            add: create(1),
            subtract: create(-1),
          };
        },
        {},
      ],
      3: [
        function (require, module, exports) {
          // days in various languages
          module.exports.en = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
          module.exports.en.abbr = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
          module.exports.en.short = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];

          module.exports.fr = ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"];
          module.exports.fr.abbr = ["dim", "lun", "mar", "mer", "jeu", "ven", "sam"];
          module.exports.fr.short = ["di", "lu", "ma", "me", "je", "ve", "sa"];

          module.exports.es = ["domingo", "lunes", "martes", "miercoles", "jueves", "viernes", "sabado"];
          module.exports.es.abbr = ["dom", "lun", "mar", "mir", "jue", "vie", "sab"];
          module.exports.es.short = ["do", "lu", "ma", "mi", "ju", "vi", "sa"];

          module.exports.it = ["Domenica", "Lunedi", "Martedi", "Mercoledi", "Giovedi", "Venerdi", "Sabato"];
          module.exports.it.abbr = ["Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"];
          module.exports.it.short = ["D", "L", "Ma", "Me", "G", "V", "S"];

          // default
          module.exports = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
          module.exports.abbr = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
          module.exports.short = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
        },
        {},
      ],
      4: [
        function (require, module, exports) {
          var iterateObject = require("iterate-object"),
            sliced = require("sliced");

          function elly(input, parent) {
            if (typeof input === "string") {
              if (input.charAt(0) === "<") {
                // Create element
                var el = document.createElement(input.slice(1, -1));
                iterateObject(parent || {}, function (val, key) {
                  switch (key) {
                    case "text":
                      el.textContent = val;
                      return;
                    case "html":
                      el.innerHTML = val;
                      return;
                    default:
                      el.setAttribute(key, val);
                  }
                });
                return el;
              }
              parent = parent || document;
              return parent.querySelector(input);
            }
            return input;
          }

          elly.$$ = function (selector, parent) {
            if (typeof selector === "string") {
              parent = parent || document;
              return sliced(parent.querySelectorAll(selector));
            }
            return [selector];
          };

          module.exports = elly;
        },
        { "iterate-object": 9, sliced: 13 },
      ],
      5: [
        function (require, module, exports) {
          module.exports = function (input, maxLength, fillString) {
            fillString = fillString || "0";
            maxLength = (maxLength || 2) - (input = input.toString()).length;
            return (maxLength <= 0 ? "" : fillString.repeat(maxLength)) + input;
          };
        },
        {},
      ],
      6: [
        function (require, module, exports) {
          var months = require("months"),
            days = require("days"),
            fillo = require("fillo"),
            Parser = require("parse-it").Parser;

          var h = {
            YYYY: function (d, utc) {
              return utc ? d.getUTCFullYear() : d.getFullYear();
            },
            YY: function (d, utc) {
              return h.YYYY(d, utc) % 100;
            },
            MMMM: function (d, utc) {
              return utc ? months[d.getUTCMonth()] : months[d.getMonth()];
            },
            MMM: function (d, utc) {
              return utc ? months.abbr[d.getUTCMonth()] : months.abbr[d.getMonth()];
            },
            MM: function (d, utc) {
              return fillo(utc ? d.getUTCMonth() + 1 : d.getMonth() + 1);
            },
            M: function (d, utc) {
              return utc ? d.getUTCMonth() + 1 : d.getMonth() + 1;
            },
            dddd: function (d, utc) {
              return days[h.d(d, utc)];
            },
            ddd: function (d, utc) {
              return days.abbr[h.d(d, utc)];
            },
            dd: function (d, utc) {
              return days.short[h.d(d, utc)];
            },
            d: function (d, utc) {
              return utc ? d.getUTCDay() : d.getDay();
            },
            DD: function (d, utc) {
              return fillo(h.D(d, utc));
            },
            D: function (d, utc) {
              return utc ? d.getUTCDate() : d.getDate();
            },
            A: function (d, utc) {
              return h.a(d, utc).toUpperCase();
            },
            a: function (d, utc) {
              return h.H(d, utc) >= 12 ? "pm" : "am";
            },
            hh: function (d, utc) {
              return fillo(h.h(d, utc));
            },
            h: function (d, utc) {
              return h.H(d, utc) % 12 || 12;
            },
            HH: function (d, utc) {
              return fillo(h.H(d, utc));
            },
            H: function (d, utc) {
              return utc ? d.getUTCHours() : d.getHours();
            },
            mm: function (d, utc) {
              return fillo(h.m(d, utc));
            },
            m: function (d, utc) {
              return utc ? d.getUTCMinutes() : d.getMinutes();
            },
            ss: function (d, utc) {
              return fillo(h.s(d, utc));
            },
            s: function (d, utc) {
              return utc ? d.getUTCSeconds() : d.getSeconds();
            },
            S: function (d, utc) {
              return Math.round((h.s(d, utc) / 60) * 10);
            },
            SS: function (d, utc) {
              return fillo((h.s(d, utc) / 60) * 100);
            },
            SSS: function (d, utc) {
              return fillo((h.s(d, utc) / 60) * 1000, 3);
            },
            Z: function (d) {
              var offset = -d.getTimezoneOffset();
              return (
                (offset >= 0 ? "+" : "-") + fillo(parseInt(Math.abs(offset) / 60)) + ":" + fillo(Math.abs(offset) % 60)
              );
            },
            ZZ: function (d) {
              var offset = -d.getTimezoneOffset();
              return (offset >= 0 ? "+" : "-") + fillo(parseInt(Math.abs(offset) / 60)) + fillo(Math.abs(offset) % 60);
            },
          };

          var parser = new Parser(h);

          module.exports = function (date, str) {
            return parser.run(str, [date, date._useUTC]);
          };
        },
        { days: 3, fillo: 5, months: 10, "parse-it": 11 },
      ],
      9: [
        function (require, module, exports) {
          var isObj =
            "function" == typeof Symbol && "symbol" === _typeof2(Symbol.iterator)
              ? function (e) {
                  return void 0 === e ? "undefined" : _typeof2(e);
                }
              : function (e) {
                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype
                    ? "symbol"
                    : void 0 === e
                    ? "undefined"
                    : _typeof2(e);
                };

          module.exports = function (obj, fn) {
            var i = 0;
            if (Array.isArray(obj)) {
              for (; i < obj.length && !1 !== fn(obj[i], i, obj); ++i);
            } else if ("object" === (void 0 === obj ? "undefined" : isObj(obj)) && null !== obj) {
              var ks = Object.keys(obj);
              for (; i < ks.length && !1 !== fn(obj[ks[i]], ks[i], obj); ++i);
            }
          };
        },
        {},
      ],
      10: [
        function (require, module, exports) {
          module.exports = [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
          ];
          module.exports.abbr = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

          module.exports.it = [
            "Gennaio",
            "Febbraio",
            "Marzo",
            "Aprile",
            "Maggio",
            "Giugno",
            "Luglio",
            "Agosto",
            "Settembre",
            "Ottobre",
            "Novembre",
            "Dicembre",
          ];
          module.exports.abbr.it = ["Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"];

          module.exports.de = [
            "Januar",
            "Februar",
            "März",
            "April",
            "Mai",
            "Juni",
            "Juli",
            "August",
            "September",
            "Oktober",
            "November",
            "Dezember",
          ];
          module.exports.abbr.de = ["Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"];
        },
        {},
      ],
      11: [
        function (require, module, exports) {
          var _createClass = (function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                (descriptor.enumerable = descriptor.enumerable || false),
                  (descriptor.configurable = true),
                  "value" in descriptor && (descriptor.writable = true),
                  Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            return function (Constructor, protoProps, staticProps) {
              return (
                protoProps && defineProperties(Constructor.prototype, protoProps),
                staticProps && defineProperties(Constructor, staticProps),
                Constructor
              );
            };
          })();

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var regexEscape = require("regex-escape");

          var Parser = (function () {
            function Parser(obj) {
              _classCallCheck(this, Parser);
              this.obj = obj || {};
              this.re = new RegExp("^(" + Object.keys(obj).map(regexEscape).join("|") + ")");
            }

            _createClass(Parser, [
              {
                key: "run",
                value: function run(input, args) {
                  var output = "";
                  args = args || [];

                  while (input) {
                    var match = input.match(this.re),
                      key = match && match[1],
                      piece = key || input.charAt(0);

                    if (key) {
                      var val = this.obj[key];
                      if (typeof val === "function") {
                        val = val.apply(this, args);
                      }
                      output += val;
                    } else {
                      output += piece;
                    }

                    input = input.substring(piece.length);
                  }
                  return output;
                },
              },
            ]);

            return Parser;
          })();

          function parseIt(input, obj, args) {
            return new Parser(obj).run(input, args);
          }
          parseIt.Parser = Parser;
          module.exports = parseIt;
        },
        { "regex-escape": 12 },
      ],
      12: [
        function (require, module, exports) {
          function regexEscape(str) {
            return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
          }
          regexEscape.proto = function () {
            return (RegExp.escape = regexEscape);
          };
          module.exports = regexEscape;
        },
        {},
      ],
      13: [
        function (require, module, exports) {
          module.exports = function (arr, start, end) {
            var newArr = [],
              len = arr.length;
            if (len === 0) return newArr;
            var i = start < 0 ? Math.max(0, start + len) : start || 0;
            if (end !== undefined) {
              len = end < 0 ? end + len : end;
            }
            while (len-- > i) {
              newArr[len - i] = arr[len];
            }
            return newArr;
          };
        },
        {},
      ],
    },
    {},
    [1]
  )(1);
});
